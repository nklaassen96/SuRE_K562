> ### TO DO:
> ### variant annotation is not yet correct as the multiple alleles lead to differen granges. 
> ### plus and minus strand is NOT GOOD ANNOTATED
> 
> # Script to calculate p-values between alternative and reference sequence
> 
> # Load the required libraries
> library(data.table)
> library(tidyverse)
> library(foreach)
> library(doMC)
> registerDoMC(cores = 6)
> 
> # Loop through all files (1 file per chromosome)
> 
> dir.input  = "/DATA/usr/n.klaassen/projects/SuRE_K562/data/interim/SuRE_Indels_gDNA_Count/SuRE_combined/sure.snp_indel.combined.chrom."
> dir.output = "/DATA/usr/n.klaassen/projects/SuRE_K562/data/interim/SuRE_Indels_pvalue/"
> 
> print(paste("start function at", Sys.time()))
[1] "start function at 2019-10-22 11:55:58"
> 
> 
> 
> foreach(k=c(1:22,"X")) %dopar% {
+   
+   # open the file and remove unnecesary columns
+   
+   file.name <- paste0(dir.input, k, ".RDS")  
+   counts.df <- readRDS(file = file.name)
+   counts.df[,c("count", "SNP_SEQ", "SNP_PARENT", "cDNA.K562.B1", "cDNA.K562.B2", "cDNA.K562.B3", "cDNA.HepG2.B1", "cDNA.HepG2.B2", "library", "cDNA.K562.sum.norm", "cDNA.HepG2.sum.norm")] <- NULL
+   gc()
+   
+   
+ 
+   # 1. order the elements based on snp.id
+   counts.df <- counts.df[order(counts.df$SNP_ID),]
+   
+   # Make the datatable back into a dataframe because the function is then much quicker
+   
+   counts.df <- as.data.frame(counts.df[1:100000,])
+   
+   gc()
+   
+   # 2. locate the position where a new snp starts by finding duplicate snp ids. Locate the 
+   # first and last snp position to generate blocks
+   
+   new.snp <- which(!duplicated(counts.df$SNP_ID))
+   new.snp.position <- new.snp[seq(from=1, to = length(new.snp), by = 1000)]
+   last.snp.position <- c(new.snp.position-1, nrow(counts.df))
+ 
+   
+   
+   # loop through the blocks of snps that are generated in this loop
+   
+   all.results.indel <- NULL
+   
+   for (b in c(1:length(new.snp.position))){
+     
+   print(paste0(Sys.time(), " start block ",b,"/",length(new.snp.position), " chromosome ", k))
+   
+   reduced.counts.df <- counts.df[new.snp.position[b]:last.snp.position[b+1],]
+     
+   
+   
+    
+   
+   
+   # Get the indel.ids of the indels that have reads for reference and alternative alleles and
+   # construct a new dataframe with only these indels. 
+   
+   snp_indel.ids.vector <- names(which(tapply(reduced.counts.df$SNP_VAR, reduced.counts.df$SNP_ID, function(x) {all(c(0,1) %in% x)} ) == TRUE))
+   print(length(snp_indel.ids.vector))
+   
+   snp_indel.df <- reduced.counts.df[reduced.counts.df$SNP_ID %in% snp_indel.ids.vector,]
+   
+   
+   
+   # Generate an empty results dataframe for the indels 
+   
+   results.indel <- data.frame(matrix(nrow = length(snp_indel.ids.vector), ncol = 18))
+   colnames(results.indel) <- c("SNP_ID","snp.type", "chrom", "pos.hg19", "ref.element.count", "alt.element.count", "K562.cDNA.ref.mean","K562.cDNA.alt.mean", "K562.cDNA.ref.median", "K562.cDNA.alt.median", "HepG2.cDNA.ref.mean","HepG2.cDNA.alt.mean","HepG2.cDNA.ref.median", "HepG2.cDNA.alt.median", "K562.wilcoxon.pvalue", "HepG2.wilcoxon.pvalue", "K562.wilcoxon.pvalue.random", "HepG2.wilcoxon.pvalue.random")
+   
+ 
+   
+   ############################################
+   # Start actual loop through all the Indels and SNPS #
+   ############################################
+   
+   
+  
+   for (i in 1:length(snp_indel.ids.vector)){
+     #if (i %% 250 == 0){print(i)}
+     
+     snp.idx <- which(snp_indel.df$SNP_ID == snp_indel.ids.vector[i])
+     
+     ref <- which(snp_indel.df[snp.idx, "SNP_VAR"] == 0)
+     alt <- which(snp_indel.df[snp.idx, "SNP_VAR"] == 1)
+     
+     ref.random <- sample(c(ref,alt), size = length(ref))
+     alt.random <- c(ref,alt)[!c(ref,alt)%in%ref.random]
+     
+     # Construct results dataframe
+     results.indel[i,"SNP_ID"]  <- snp_indel.df[snp.idx[1], "SNP_ID"]
+     results.indel[i,"chrom"]   <- str_remove_all(string = snp_indel.df[snp.idx[1], "chrom"], pattern = "[_maternalpaternal]")
+     results.indel[i,"pos.hg19"]     <- snp_indel.df[snp.idx[1], "SNP_ABS_POS_hg19"]
+     results.indel[i,"snp.type"]<- snp_indel.df[snp.idx[1], "SNP_TYPE"]
+     
+     results.indel[i,"ref.element.count"] <- length(ref)
+     results.indel[i,"alt.element.count"] <- length(alt)
+     
+     results.indel[i,"K562.cDNA.ref.mean"] <- mean(snp_indel.df[snp.idx[ref], "cDNA.K562.norm.ipcr"])
+     results.indel[i,"K562.cDNA.alt.mean"] <- mean(snp_indel.df[snp.idx[alt], "cDNA.K562.norm.ipcr"])
+     results.indel[i,"K562.cDNA.ref.median"] <- median(snp_indel.df[snp.idx[ref], "cDNA.K562.norm.ipcr"])
+     results.indel[i,"K562.cDNA.alt.median"] <- median(snp_indel.df[snp.idx[alt], "cDNA.K562.norm.ipcr"])
+     
+     
+     results.indel[i,"HepG2.cDNA.ref.mean"] <- mean(snp_indel.df[snp.idx[ref], "cDNA.HepG2.norm.ipcr"])
+     results.indel[i,"HepG2.cDNA.alt.mean"] <- mean(snp_indel.df[snp.idx[alt], "cDNA.HepG2.norm.ipcr"])
+     results.indel[i,"HepG2.cDNA.ref.median"] <- median(snp_indel.df[snp.idx[ref], "cDNA.HepG2.norm.ipcr"])
+     results.indel[i,"HepG2.cDNA.alt.median"] <- median(snp_indel.df[snp.idx[alt], "cDNA.HepG2.norm.ipcr"])
+     
+     results.indel[i,"K562.wilcoxon.pvalue"] <-  wilcox.test(snp_indel.df[snp.idx[ref], "cDNA.K562.norm.ipcr"], snp_indel.df[snp.idx[alt], "cDNA.K562.norm.ipcr"])$p.value
+     results.indel[i,"HepG2.wilcoxon.pvalue"] <- wilcox.test(snp_indel.df[snp.idx[ref], "cDNA.HepG2.norm.ipcr"], snp_indel.df[snp.idx[alt], "cDNA.HepG2.norm.ipcr"])$p.value
+     results.indel[i,"K562.wilcoxon.pvalue.random"] <- wilcox.test(snp_indel.df[snp.idx[ref.random], "cDNA.K562.norm.ipcr"], snp_indel.df[snp.idx[alt.random], "cDNA.K562.norm.ipcr"])$p.value
+     results.indel[i,"HepG2.wilcoxon.pvalue.random"] <- wilcox.test(snp_indel.df[snp.idx[ref.random], "cDNA.HepG2.norm.ipcr"], snp_indel.df[snp.idx[alt.random], "cDNA.HepG2.norm.ipcr"])$p.value
+     
+   
+   } # end for-loop through 1000 snps
+   
+   all.results.indel <- rbind(all.results.indel, results.indel)
+   
+   } # end for-loop through snp-blocks
+   
+   file.name <- paste0(dir.output, "sure.snp_indel.dataframe.pvalue.chrom.", k,".RDS")
+   saveRDS(object = all.results.indel, file = file.name)
+   print(paste("end function chrom",k, Sys.time()))
+   
+ } # end foreach-loop through files
[1] "2019-10-22 12:01:24 start block 1/1 chromosome 5"
[1] 573
[1] "end function chrom 5 2019-10-22 12:01:27"
[1] "2019-10-22 12:01:31 start block 1/1 chromosome 6"
[1] 546
[1] "end function chrom 6 2019-10-22 12:01:35"
[1] "2019-10-22 12:01:47 start block 1/1 chromosome 4"
[1] 581
[1] "end function chrom 4 2019-10-22 12:01:50"
[1] "2019-10-22 12:01:59 start block 1/1 chromosome 3"
[1] 580
[1] "end function chrom 3 2019-10-22 12:02:02"
[1] "2019-10-22 12:03:31 start block 1/1 chromosome 2"
[1] 565
[1] "end function chrom 2 2019-10-22 12:03:35"
[1] "2019-10-22 12:03:49 start block 1/1 chromosome 1"
[1] 530
[1] "end function chrom 1 2019-10-22 12:03:52"
[1] "2019-10-22 12:05:29 start block 1/1 chromosome 12"
[1] 540
[1] "end function chrom 12 2019-10-22 12:05:32"
[1] "2019-10-22 12:05:38 start block 1/1 chromosome 11"
[1] 549
[1] "end function chrom 11 2019-10-22 12:05:41"
[1] "2019-10-22 12:05:50 start block 1/1 chromosome 9"
[1] 551
[1] "end function chrom 9 2019-10-22 12:05:52"
[1] "2019-10-22 12:07:00 start block 1/1 chromosome 10"
[1] 533
[1] "end function chrom 10 2019-10-22 12:07:03"
[1] "2019-10-22 12:08:08 start block 1/1 chromosome 18"
[1] 587
[1] "2019-10-22 12:08:10 start block 1/1 chromosome 8"
[1] 586
[1] "end function chrom 18 2019-10-22 12:08:11"
[1] "end function chrom 8 2019-10-22 12:08:13"
[1] "2019-10-22 12:08:30 start block 1/1 chromosome 17"
[1] 500
[1] "end function chrom 17 2019-10-22 12:08:32"
[1] "2019-10-22 12:08:35 start block 1/1 chromosome 15"
[1] 514
[1] "end function chrom 15 2019-10-22 12:08:38"
[1] "2019-10-22 12:08:45 start block 1/1 chromosome 7"
[1] 564
[1] "end function chrom 7 2019-10-22 12:08:49"
[1] "2019-10-22 12:09:51 start block 1/1 chromosome 21"
[1] 577
[1] "end function chrom 21 2019-10-22 12:09:54"
[1] "2019-10-22 12:10:00 start block 1/1 chromosome 16"
[1] 497
[1] "end function chrom 16 2019-10-22 12:10:03"
[1] "2019-10-22 12:10:12 start block 1/1 chromosome X"
[1] 1
[1] "end function chrom X 2019-10-22 12:10:13"
[1] "2019-10-22 12:11:36 start block 1/1 chromosome 14"
[1] 545
[1] "end function chrom 14 2019-10-22 12:11:43"
[1] "2019-10-22 12:12:54 start block 1/1 chromosome 22"
[1] 475
[1] "end function chrom 22 2019-10-22 12:13:01"
[1] "2019-10-22 12:13:10 start block 1/1 chromosome 13"
[1] 609
[1] "end function chrom 13 2019-10-22 12:13:17"
[1] "2019-10-22 12:16:13 start block 1/1 chromosome 20"
[1] 503
[1] "end function chrom 20 2019-10-22 12:16:20"
[1] "2019-10-22 12:18:26 start block 1/1 chromosome 19"
[1] 486
[1] "end function chrom 19 2019-10-22 12:18:32"
[[1]]
[1] "end function chrom 1 2019-10-22 12:03:52"

[[2]]
[1] "end function chrom 2 2019-10-22 12:03:35"

[[3]]
[1] "end function chrom 3 2019-10-22 12:02:02"

[[4]]
[1] "end function chrom 4 2019-10-22 12:01:50"

[[5]]
[1] "end function chrom 5 2019-10-22 12:01:27"

[[6]]
[1] "end function chrom 6 2019-10-22 12:01:35"

[[7]]
[1] "end function chrom 7 2019-10-22 12:08:49"

[[8]]
[1] "end function chrom 8 2019-10-22 12:08:13"

[[9]]
[1] "end function chrom 9 2019-10-22 12:05:52"

[[10]]
[1] "end function chrom 10 2019-10-22 12:07:03"

[[11]]
[1] "end function chrom 11 2019-10-22 12:05:41"

[[12]]
[1] "end function chrom 12 2019-10-22 12:05:32"

[[13]]
[1] "end function chrom 13 2019-10-22 12:13:17"

[[14]]
[1] "end function chrom 14 2019-10-22 12:11:43"

[[15]]
[1] "end function chrom 15 2019-10-22 12:08:38"

[[16]]
[1] "end function chrom 16 2019-10-22 12:10:03"

[[17]]
[1] "end function chrom 17 2019-10-22 12:08:32"

[[18]]
[1] "end function chrom 18 2019-10-22 12:08:11"

[[19]]
[1] "end function chrom 19 2019-10-22 12:18:32"

[[20]]
[1] "end function chrom 20 2019-10-22 12:16:20"

[[21]]
[1] "end function chrom 21 2019-10-22 12:09:54"

[[22]]
[1] "end function chrom 22 2019-10-22 12:13:01"

[[23]]
[1] "end function chrom X 2019-10-22 12:10:13"

> 
> 
> #After generation of all the individual files, load them all and concatonate them
> print(paste( Sys.time(), "start concatonating"))
[1] "2019-10-22 12:18:32 start concatonating"
> results.indel.all <- NULL
> 
> for (i in c(1:22,"X")){
+   print(paste(Sys.time(), "start", i))
+   # 1. Define data
+   dir.input <- "/DATA/usr/n.klaassen/projects/SuRE_K562/data/interim/SuRE_Indels_pvalue/sure.snp_indel.dataframe.pvalue.chrom."
+   file.name <- paste0(dir.input, i, ".RDS")
+   0
+   
+   # 2. Load the data
+   sure.df <- readRDS(file = file.name)
+   
+   
+   # 3. Concatonate the data
+   results.indel.all <- rbind(results.indel.all, sure.df)
+   
+ }
[1] "2019-10-22 12:18:32 start 1"
[1] "2019-10-22 12:18:32 start 2"
[1] "2019-10-22 12:18:32 start 3"
[1] "2019-10-22 12:18:32 start 4"
[1] "2019-10-22 12:18:32 start 5"
[1] "2019-10-22 12:18:32 start 6"
[1] "2019-10-22 12:18:32 start 7"
[1] "2019-10-22 12:18:32 start 8"
[1] "2019-10-22 12:18:32 start 9"
[1] "2019-10-22 12:18:32 start 10"
[1] "2019-10-22 12:18:32 start 11"
[1] "2019-10-22 12:18:32 start 12"
[1] "2019-10-22 12:18:32 start 13"
[1] "2019-10-22 12:18:32 start 14"
[1] "2019-10-22 12:18:32 start 15"
[1] "2019-10-22 12:18:32 start 16"
[1] "2019-10-22 12:18:32 start 17"
[1] "2019-10-22 12:18:32 start 18"
[1] "2019-10-22 12:18:32 start 19"
[1] "2019-10-22 12:18:32 start 20"
[1] "2019-10-22 12:18:32 start 21"
[1] "2019-10-22 12:18:32 start 22"
[1] "2019-10-22 12:18:32 start X"
> file.name <- paste0(dir.output, "sure.snp_indel.dataframe.pvalue.all.RDS")
> saveRDS(object = results.indel.all, file = file.name)
> 
> print(paste(Sys.time(), "finish concatonating"))
[1] "2019-10-22 12:18:32 finish concatonating"
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
